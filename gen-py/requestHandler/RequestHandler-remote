#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from requestHandler import RequestHandler
from requestHandler.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string do_post(string message, string path)')
  print('  string do_update(string body, string path)')
  print('  string do_update_version(string body, i32 version, string path)')
  print('  string do_delete_version(i32 version, string path)')
  print('  string do_list(string path)')
  print('  string do_delete(string path)')
  print('  string do_get(string path)')
  print('  Node getNode(string path)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = RequestHandler.Client(protocol)
transport.open()

if cmd == 'do_post':
  if len(args) != 2:
    print('do_post requires 2 args')
    sys.exit(1)
  pp.pprint(client.do_post(args[0],args[1],))

elif cmd == 'do_update':
  if len(args) != 2:
    print('do_update requires 2 args')
    sys.exit(1)
  pp.pprint(client.do_update(args[0],args[1],))

elif cmd == 'do_update_version':
  if len(args) != 3:
    print('do_update_version requires 3 args')
    sys.exit(1)
  pp.pprint(client.do_update_version(args[0],eval(args[1]),args[2],))

elif cmd == 'do_delete_version':
  if len(args) != 2:
    print('do_delete_version requires 2 args')
    sys.exit(1)
  pp.pprint(client.do_delete_version(eval(args[0]),args[1],))

elif cmd == 'do_list':
  if len(args) != 1:
    print('do_list requires 1 args')
    sys.exit(1)
  pp.pprint(client.do_list(args[0],))

elif cmd == 'do_delete':
  if len(args) != 1:
    print('do_delete requires 1 args')
    sys.exit(1)
  pp.pprint(client.do_delete(args[0],))

elif cmd == 'do_get':
  if len(args) != 1:
    print('do_get requires 1 args')
    sys.exit(1)
  pp.pprint(client.do_get(args[0],))

elif cmd == 'getNode':
  if len(args) != 1:
    print('getNode requires 1 args')
    sys.exit(1)
  pp.pprint(client.getNode(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
