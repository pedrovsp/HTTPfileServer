#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from sharedService import SharedService
from sharedService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('   get_children(Node node,  returnList)')
  print('  Node alter_data(Node node, string data)')
  print('  Node search_name(Node node, string name)')
  print('  Node delete_child(Node node, Node child)')
  print('  Node add_data(Node node, string data)')
  print('  Node add_child(Node node, Node child)')
  print('  Node NodeInit(string name, string data)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = SharedService.Client(protocol)
transport.open()

if cmd == 'get_children':
  if len(args) != 2:
    print('get_children requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_children(eval(args[0]),eval(args[1]),))

elif cmd == 'alter_data':
  if len(args) != 2:
    print('alter_data requires 2 args')
    sys.exit(1)
  pp.pprint(client.alter_data(eval(args[0]),args[1],))

elif cmd == 'search_name':
  if len(args) != 2:
    print('search_name requires 2 args')
    sys.exit(1)
  pp.pprint(client.search_name(eval(args[0]),args[1],))

elif cmd == 'delete_child':
  if len(args) != 2:
    print('delete_child requires 2 args')
    sys.exit(1)
  pp.pprint(client.delete_child(eval(args[0]),eval(args[1]),))

elif cmd == 'add_data':
  if len(args) != 2:
    print('add_data requires 2 args')
    sys.exit(1)
  pp.pprint(client.add_data(eval(args[0]),args[1],))

elif cmd == 'add_child':
  if len(args) != 2:
    print('add_child requires 2 args')
    sys.exit(1)
  pp.pprint(client.add_child(eval(args[0]),eval(args[1]),))

elif cmd == 'NodeInit':
  if len(args) != 2:
    print('NodeInit requires 2 args')
    sys.exit(1)
  pp.pprint(client.NodeInit(args[0],args[1],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
